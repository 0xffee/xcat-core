#!/bin/sh

#-----------------------------------------------------------
#
# Get proper disk to install OS
#
# 1. Check all partitions list in /proc/partitions, whether 
#    there is disk had OS installed. Select the one with the
#    smallest WWN.
# 2. Check all disks list in /proc/partitions, sort them by
#    WWN and driver type, select the first one.
# 3. Select the default one: /dev/sda.   
#
# Output: /tmp/install_disk
#
#-----------------------------------------------------------

install_disk=""
rm /tmp/install_disk
tmpdir="/tmp/xcat.getinstalldisk"
mkdir -p $tmpdir

has_awk=$(find / -name "awk")

logfile="/tmp/xcat_getinstalldisk_log"
tmpfile=$tmpdir"/getinstalldisk_"

# Check if any disk have installed OS
if [ -z "$install_disk" ]; then

    if [ -z "$has_awk" ]; then
        entries=$(cat /proc/partitions | sed 's/  */ /g' | cut -d " " -f5 | grep -v "name" | grep -e "[s|h]d.*$")
    else
        entries=$(awk -F ' '  '{print $4}' /proc/partitions | grep -v "name" | grep -e "[s|h]d.*$")
    fi    
    
    for entry in $entries; do

        if [ -z "$has_awk" ]; then
            dev_type=$(udevadm info --query=property --name=/dev/$entry | grep -i "DEVTYPE" | cut -d "=" -f2 | tr A-Z a-z)
        else
            dev_type=$(udevadm info --query=property --name=/dev/$entry | grep -i "DEVTYPE" | awk -F = '{print $2}' | tr A-Z a-z)
        fi        
 
        if [ "$dev_type" == "disk" ]; then
            disks=$disks" $entry"
        elif [ "$dev_type" == "partition" ]; then
            partitions=$partitions" $entry"
        fi

    done

    mount_dir=$tmpdir"/xcat.getinstalldisk.mount"
    mkdir -p $mount_dir;

    for partition in $partitions; do

        echo "Check the partition $partition." >> $logfile

        if [ -e "$tmpfile${partition%%[0-9]*}" ]; then
            echo "    The disk ${partition%%[0-9]*} had OS installed, check next partition." >> $logfile
            continue
        fi

        if [ -z "$has_awk" ]; then
            fs_type=$(udevadm info --query=property --name=/dev/$partition | grep -i "FS_TYPE" | cut -d "=" -f2)
        else
            fs_type=$(udevadm info --query=property --name=/dev/$partition | grep -i "FS_TYPE" | awk -F = '{print $2}')
        fi

        rc=255

        # mount partition based on fs type, if fs_type is swap, do not mount it, jump to next partition.
        if [ -z "$fs_type" ]; then
            mount /dev/$partition $mount_dir
            rc=$?
        elif [ "$fs_type" != "swap" ]; then
            mount -t $fs_type /dev/$partition $mount_dir
            rc=$?
        fi

        if [ $rc -eq 0 ]; then
      
            has_kernel=0
            has_wwn=0
            has_path=0

            echo "    Partition $partition mount success." >> $logfile

            ker_dir=$mount_dir            
            
            if [ -d "$mount_dir/boot" ]; then
                ker_dir="$mount_dir/boot"
            fi

            for i in $ker_dir/vmlinuz*; do
                disk_part=${partition%%[0-9]*}
                touch "$tmpfile$disk_part"
                echo -e "    The partition $partition has kernel file." >> $logfile
                has_kernel=1
                break
            done
            
            if [ $has_kernel -eq 1 ]; then
                disk_info=$(udevadm info --query=property --name=$disk_part)
                disk_wwn=$(IFS= ;echo $disk_info | grep '\<ID_WWN\>' | cut -d "=" -f2 | tr A-Z a-z)
                disk_path=$(IFS= ;echo $disk_info | grep DEVPATH | cut -d "=" -f2 | tr A-Z a-z)

                if [ "$disk_wwn" ]; then
                    has_wwn=1
                    disk_array_wwn=$disk_array_wwn"$disk_part $disk_wwn\n"
                    echo "    The disk $disk_part has wwn information $disk_wwn." >> $logfile
                elif [ "$disk_path" ]; then
                    has_path=1
                    disk_array_path=$disk_array_path"$disk_part $disk_path\n"
                    echo "    The disk $disk_part has path information $disk_path." >> $logfile
                else
                    disk_array_other=$disk_array_other"$disk_part\n"
                    echo "    The disk $disk_part has no wwn and path information." >> $logfile
                fi 
            else
                echo "    The partition $partition does not have kernel file." >> $logfile
            fi
             
            umount $mount_dir || echo "    $partition umount failed." >> $logfile
        else
            echo "    Partition $partition mount failed or the partition is swap." >> $logfile
        fi
    done

    if [ $has_wwn -eq 1 ]; then
        disk_array=$disk_array_wwn
    elif [ $has_path -eq 1 ]; then
        disk_array=$disk_array_path
    else
        disk_array=$disk_array_other
    fi

    if [ "$disk_array" ]; then    
        echo -e "The disk_array:" >> $logfile
        echo -e "    $disk_array" >> $logfile

        install_disk=/dev/$(echo -e $disk_array | grep -v "^$" | sort -t : -k 2 -b | cut -d " " -f1 | head -n 1)
   
        echo -e "The install_disk is $install_disk." >> $logfile
    fi
    rmdir $mount_dir;
    rm $tmpfile*;
fi

# Sort all disks based on their WWN and driver type, choose the first one
if [ -z "$install_disk" ]; then
    
    for disk in $disks; do

        disk_info=$(udevadm info --query=property --name=$disk)
        disk_wwn=$(IFS= ;echo $disk_info | grep '\<ID_WWN\>' | cut -d "=" -f2 | tr A-Z a-z)
        disk_path=$(IFS= ;echo $disk_info | grep DEVPATH | cut -d "=" -f2 | tr A-Z a-z)
        disk_driver=$(udevadm info --attribute-walk --name=$disk | grep DRIVERS| grep -v '""'| grep -v '"sd"'|
                    \head -n 1| sed -e 's/[^"]*"//' -e 's/"//' | tr A-Z a-z)

        echo "The disk $disk information: disk_wwn=$disk_wwn disk_path=$disk_path disk_driver=$disk_driver." >> $logfile

        if [ "$disk_wwn" ]; then

            has_wwn=1
            file_pre="wwn"
            disk_data=$disk_wwn

        elif [ $has_wwn -eq 1 ]; then

            echo "The disk $disk has no wwn info." >> $logfile
            echo "There is other disk has wwn info, so don't record this disk." >> $logfile
            continue;

        elif [ "$disk_path" ]; then
        
            has_path=1
            file_pre="path"
            disk_data=$disk_path

        elif [ $has_path -eq 1 ]; then        
 
            echo "The disk $disk has no wwn or path info." >> $logfile
            echo "There is other disk has path info, so don't record this disk." >> $logfile
            continue;
  
        else
 
           file_pre="other"
           disk_data=""
  
        fi
            
        case "$disk_driver" in

        "ata_piix4"|"PMC MaxRAID"|"ahci"|"megaraid_sas")
            echo "$disk $disk_data" >> "$tmpfile""$file_pre""firchodisks"
            echo "    Add disk: $disk $disk_data $driver into $file_pre firchodisks" >> $logfile
            ;;
        "mptsas"|"mpt2sas"|"mpt3sas")
            echo "$disk $disk_data" >> "$tmpfile""$file_pre""secchodisks"
            echo "    Add disk: $disk $disk_data $driver into $file_pre secchodisks" >> $logfile
            ;;
        *)
            echo "$disk $disk_data" >> "$tmpfile""$file_pre""thichodisks"
            echo "    Add disk: $disk $disk_data $driver into $file_pre thichodisks" >> $logfile
            ;;
        esac
    done

    for seq in fir sec thi; do
        if [ -s $tmpfile$file_pre${seq}chodisks ]; then
            install_file="$tmpfile$file_pre${seq}chodisks"
            break
        fi
    done
        

    if [ "$install_file" ] && [ -s $install_file ]; then
        install_disk=/dev/$(cat $install_file | grep -v "^$" | sort -t : -k 2 -b | cut -d " " -f1 | head -n 1)
        echo -e "The install_disk is $install_disk by sorting $file_pre and DRIVER." >> $logfile
    fi    
    rm $tmpfile*;
fi

rm -rf $tmpdir;

# Cannot find proper disk for OS install, select the default one "/dev/sda"
if [ -z "$install_disk" ]; then
    install_disk="/dev/sda"
    echo -e "The default install_disk is $install_disk." >> $logfile
fi

# Output the result to /tmp/install_disk file
echo $install_disk > /tmp/install_disk
