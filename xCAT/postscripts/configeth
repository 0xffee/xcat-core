#!/usr/bin/perl
# IBM(c) 2007 EPL license http://www.eclipse.org/legal/epl-v10.html

# xCAT post script for configuring additional ethernet nics. Information is
# retreieved from nics table. Environment variables are set in the postscript
# The nic (i.e. eth1, en1) is passed as the only argument.
# Environment variables are set in the postscript in the mypostscript.tmpl
# file on the management node:
# 
#
# NICNODE - the name of the node minus the NICHOSTNAMESUFFIXES
# NICIPS  - the ip address for this nic
# NICTYPES - for configeth - this must be ethernet
# NICCUSTOMSCRIPTS - parsed in confignics to invoke this script if set. (not used here)
# NICNETWORKS - the network this nic is attached to. Must also verify this network is 
#               set in the networks table.

use strict;
use Socket;

my $nic = shift(@ARGV);
my $nicips = $ENV{NICIPS};
my $nicnetworks = $ENV{NICNETWORKS};
my $nicnode = $ENV{NICNODE};
my $net_cnt = $ENV{NETWORKS_LINES};

my $netmask ='';
my $ipaddr = '';
my $nic_num = '';
my $subnet = '';
my $nic_net = '';
my $net_name = '';
my @nic_nets = (); # array of networks for this nic
my @nic_ips =();   # array of ipaddresses for this nic
my @networks = (); # array of all networks from networks table.
                   # { network_name, subnet, netmask }

system("logger -t xcat -p local4.err  'configeth: NIC:                  $nic'");
system("logger -t xcat -p local4.err  'configeth: NICNETWORKS:          $nicnetworks'");
system("logger -t xcat -p local4.err  'configeth: NICIPS:               $nicips'");

# create array of network info. Needed in case where there are 
# more than one ip address per nic and shouldn't be many networks.
my $net_info;
my $cnt = 1;

while ( $cnt <= $net_cnt ) {
    $net_info = $ENV{"NETWORKS_LINE$cnt"};
    $net_info =~ /^netname=([^\|]*)\|\|/; 
    $net_name = $1;
    $net_info =~ /net=([^\|]*)\|\|/;
    $subnet = $1;
    $net_info =~ /mask=([^\|]*)\|\|/;
    $netmask = $1;
    push @{ $networks[$cnt-1] }, ($net_name, $subnet, $netmask);
    $cnt +=1; 
}

# get network or networks for this nic from NICNETWORKS: 
# eth0:1_0_0_0-255_255_0_0|network2,eth1:1_1_0_0
# create array of networks for this nic
foreach my $nic_networks (split(/,/,$nicnetworks)) {
    my @net = ();
    if ( $nic_networks =~ /!/ ) {
        @net = split(/!/,$nic_networks);
    } else {
        @net = split(/:/,$nic_networks);
    }
    if ($net[0] eq $nic) {
        @nic_nets = split(/\|/,$net[1]);
        last;
    }
}

# get all nic ipaddress from $nicips: i.e. eth0:1.0.0.1|2.0.0.1,eth1:1.1.1.1
# Then get all ips for this specific nic, i.e. eth0.
foreach my $ips (split(/,/,$nicips)) {
    my @ip = ();
    if ( $ips =~ /!/ ) {
        @ip = split(/!/,$ips);
    } else {
        @ip = split(/:/,$ips);
    }
    if ($ip[0] eq $nic ) {
        @nic_ips = split(/\|/,$ip[1]);
    }
}

my $i;
for ($i=0; $i < (scalar @nic_ips) ; $i++ ) {

    # Time to create the interfaces.
    # loop through the nic networks, find the matching networks to get the
    # subnet and netmask and then create the appropriate ifcfg file for linux
    # or invoke correct AIX command.
    my $specific_nic = $nic;
    if ($i > 0) {
       $specific_nic = $nic . ":" . ($i);
    }

    $cnt = 0;
    $subnet = "";
    $netmask = "";
    $net_name = "";
    while ( $cnt < $net_cnt ) {
        if ( $networks[$cnt][0] eq $nic_nets[$i] ) {
        
            $subnet = $networks[$cnt][1];
            $netmask = $networks[$cnt][2];
            $cnt = $net_cnt; # found match - get out.
        } 
        else {
            $cnt++; 
        }
    }

    # check that there is a subnet and netmask set
    if ( !(length($subnet) > 0) || !(length($netmask) > 0) ) {
        system("logger -t xcat -p local4.err  'configeth: network subnet or netmask not set.'");
        exit 1;
    }

    if ($^O =~ /^aix/i) {
            if ($ipaddr =~ /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/) {
                runcmd("chdev -l '$specific_nic' -a netaddr=$nic_ips[$i] -a netmask=$netmask -a state='up'");
    #        } else { #ipv6
    #            runcmd("autoconf6 -6i en$nic_num");
            }
    }
    elsif (($ENV{OSVER} && ($ENV{OSVER} =~ /sles|suse/i)) || (-f "/etc/SuSE-release")) { 
        # Write the info to the ifcfg file
        my $dir = "/etc/sysconfig/network";
        if (!open(FILE, ">$dir/ifcfg-$specific_nic")) { system("logger -t xcat -p local4.err 'configeth: cannot open $dir/ifcfg-$specific_nic.'"); exit 1; }
        # Not sure what is really REQUIRED from below -- copied the eth file from
        # the system
        print FILE "DEVICE=\'$specific_nic\'\n";
        print FILE "BOOTPROTO=\'static\'\n";
        print FILE "BROADCAST=\'\'\n";
        print FILE "ETHTOOL_OPTIONS=\'\'\n";
        print FILE "IPADDR=\'".$nic_ips[$i]."\'\n";
        print FILE "MTU=\'\'\n";
        print FILE "NAME=\'\'\n";
        print FILE "NETMASK=\'".$netmask."\'\n";
        print FILE "NETWORK=\'".$subnet."\'\n";
        print FILE "REMOTE_IPADDR=\'\'\n";
        print FILE "STARTMODE=\'onboot\'\n";
        print FILE "UNIQUE=\'\'\n";
        print FILE "USERCONTROL=\'no\'\n";
        print FILE "_nm_name=\'static-0\'\n";
        
        close FILE;
        runcmd("ifup $nic");
    }
    else {
        # Write the info to the ifcfg file
        my $dir = "/etc/sysconfig/network-scripts";
        if (!open(FILE, ">$dir/ifcfg-$specific_nic")) { system("logger -t xcat -p local4.err 'configeth: cannot open $dir/ifcfg-$specific_nic.'"); exit 1; }
        print FILE "DEVICE=$specific_nic\n";
        print FILE "BOOTPROTO=none\n";
        print FILE "IPADDR=$nic_ips[$i]\n";
        print FILE "NETMASK=$netmask\n";
        #if (defined($gateway)) { print FILE "GATEWAY=$gateway\n"; }
        print FILE "ONBOOT=yes\n";
        close FILE;

        runcmd("$dir/ifup $specific_nic");
    }
#    system("logger -t xcat -p local4.info 'configeth: successfully configured $specific_nic.'");
}
exit 0;

sub runcmd {
	my $cmd = shift @_;
	$cmd .= ' 2>&1';
	my @output = `$cmd`;
	my $rc = $? >> 8;
	if ($rc) {
		system("logger -t xcat -p local4.err 'configeth: command $cmd failed with rc $rc: " . join('',@output) . "'");
		my $errout= "configeth: command $cmd failed with rc $rc.";
                echo $errout;
		exit $rc;
	}
}




